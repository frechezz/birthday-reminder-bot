import os
from dotenv import load_dotenv
import sqlite3
from datetime import datetime
import urllib.parse
from openai import OpenAI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API
client = OpenAI(
    base_url=os.getenv("OPENAI_BASE_URL"),
    api_key=os.getenv("OPENAI_API_KEY"),
)

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('birthdays.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
cursor.execute('''
CREATE TABLE IF NOT EXISTS birthdays
(user_id INTEGER, name TEXT, date TEXT)
''')
conn.commit()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS users
(user_id INTEGER PRIMARY KEY)
''')
conn.commit()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        # –≠—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = (
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Birthday Reminder Bot! üéÇ\n\n"
            "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è!\n\n"
            "üîπ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –±–ª–∏–∑–∫–∏—Ö\n"
            "üîπ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞—Ç\n"
            "üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
            "üîπ –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–∞—Ç—ã! ü•≥"
        )
        await update.message.reply_text(welcome_message)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data='add')],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data='view')],
        [InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data='generate')],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data='add_to_calendar')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'add_to_calendar':
        user_id = update.effective_user.id
        cursor.execute("SELECT name FROM birthdays WHERE user_id = ?", (user_id,))
        names = cursor.fetchall()
        if names:
            keyboard = [[InlineKeyboardButton(name[0], callback_data=f'cal_{name[0]}')] for name in names]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=reply_markup)
        else:
            await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.")

    if query.data == 'add':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:")
        context.user_data['state'] = 'waiting_name'
    elif query.data == 'view':
        user_id = update.effective_user.id
        try:
            cursor.execute("SELECT name, date FROM birthdays WHERE user_id = ?", (user_id,))
            birthdays = cursor.fetchall()
            if birthdays:
                message = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
                for name, date in birthdays:
                    message += f"{name}: {date}\n"
            else:
                message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è."

            keyboard = [
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data='add')],
                [InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data='generate')],
                [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
        except sqlite3.Error as e:
            await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    elif query.data == 'generate':
        user_id = update.effective_user.id
        cursor.execute("SELECT name FROM birthdays WHERE user_id = ?", (user_id,))
        names = cursor.fetchall()
        if names:
            keyboard = [[InlineKeyboardButton(name[0], callback_data=f'gen_{name[0]}')] for name in names]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        else:
            await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.")
    elif query.data == 'main':
        await start(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


async def add_to_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    name = query.data.split('_')[1]
    user_id = update.effective_user.id

    cursor.execute("SELECT date FROM birthdays WHERE user_id = ? AND name = ?", (user_id, name))
    birthday = cursor.fetchone()

    if birthday:
        birthday_date = datetime.strptime(birthday[0], "%d.%m.%Y")

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å
        event_name = f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name}"
        event_details = f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}!"
        event_date = birthday_date.strftime("%Y%m%d")

        base_url = "https://www.google.com/calendar/render"
        event_params = {
            "action": "TEMPLATE",
            "text": event_name,
            "details": event_details,
            "dates": f"{event_date}/{event_date}",
            "recur": "RRULE:FREQ=YEARLY"
        }
        calendar_url = f"{base_url}?{urllib.parse.urlencode(event_params)}"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
        keyboard = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å", url=calendar_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è {name} –≤ –≤–∞—à Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å:",
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text(f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    state = context.user_data.get('state')

    if state == 'waiting_name':
        context.user_data['name'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        context.user_data['state'] = 'waiting_date'
    elif state == 'waiting_date':
        date_text = update.message.text
        try:
            date = datetime.strptime(date_text, "%d.%m.%Y")
            formatted_date = date.strftime("%d.%m.%Y")
            name = context.user_data['name']
            try:
                cursor.execute("INSERT INTO birthdays (user_id, name, date) VALUES (?, ?, ?)",
                               (user_id, name, formatted_date))
                conn.commit()
                await update.message.reply_text(f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            except sqlite3.Error as e:
                await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–î–î.–ú–ú.–ì–ì–ì–ì):")
            return
        del context.user_data['state']
        await start(update, context)
    elif state == 'waiting_interests':
        interests = update.message.text
        name = context.user_data['selected_name']
        try:
            completion = client.chat.completions.create(
                model="google/gemini-flash-1.5",
                messages=[
                    {"role": "user",
                     "content": f"–°–æ–∑–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ! —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {name}. –ï–≥–æ/–ï—ë –∏–Ω—Ç–µ—Ä–µ—Å—ã: {interests}. –ü—Ä–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—à—å. –°—Ç–∞—Ä–∞–π—Å—è –¥–µ–ª–∞—Ç—å —Ç–∞–∫–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª–æ –Ω–µ –∫—Ä–∏–Ω–∂–æ–≤–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω—è–π –∏–º–µ–Ω–∞ –∏ —Ñ–∞–º–∏–ª–∏–∏. –ï—Å–ª–∏ –≤ {name} –µ—Å—Ç—å —Ñ–∞–º–∏–ª–∏—è —Ç–æ –æ–±—Ä–∞—â–∞–π—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ '–≤—ã'",
                     },
                ],
            )
            greeting = completion.choices[0].message.content
            await update.message.reply_text(f"–í–æ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {name}:\n\n{greeting}")
        except Exception as e:
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        del context.user_data['state']
        del context.user_data['selected_name']
        await start(update, context)
    else:
        await start(update, context)


async def generate_greeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    name = query.data.split('_')[1]
    context.user_data['selected_name'] = name
    context.user_data['state'] = 'waiting_interests'
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —É–≤–ª–µ—á–µ–Ω–∏—è {name} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")


def main() -> None:
    application = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(add_to_calendar, pattern=r'^cal_'))
    application.add_handler(CallbackQueryHandler(generate_greeting, pattern=r'^gen_'))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.add_error_handler(error_handler)

    application.run_polling()


if __name__ == '__main__':
    main()